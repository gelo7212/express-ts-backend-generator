# <%= projectName %>

A microservice-ready Express.js TypeScript application built with Domain-Driven Design (DDD) and Dependency Injection (DI) principles.

## 🏗️ Architecture

This project follows a **clean architecture** approach with clear separation of concerns:

```
src/
├── domain/                 # Business logic & entities
│   └── user/
│       ├── entities/       # User entity
│       ├── value-objects/  # Email value object
│       ├── events/         # Domain events
│       ├── repositories/   # Repository interfaces
│       └── services/       # Domain services
├── application/           # Use cases & orchestration
│   ├── use-cases/        # Application use cases (CQRS)
│   ├── services/         # Application services
│   └── dto/              # Data Transfer Objects
├── infrastructure/       # External concerns
│   ├── repositories/     # Repository implementations
│   ├── messaging/        # Event bus
│   ├── cache/           # Cache implementation
│   └── logger/          # Logging implementation
├── presentation/         # API layer
│   └── http/
│       ├── controllers/  # HTTP controllers
│       ├── routes/      # Route definitions
│       ├── middleware/  # HTTP middleware
│       └── dto/         # Request/Response DTOs
└── shared/              # Cross-cutting concerns
```

## 🚀 Features

- ✅ **Domain-Driven Design (DDD)** architecture
- ✅ **Dependency Injection** with Inversify
- ✅ **CQRS** pattern implementation
- ✅ **Event-driven** architecture
- ✅ **Clean API** with validation
- ✅ **Comprehensive testing** setup
- ✅ **Docker** containerization
- ✅ **TypeScript** with strict configuration
- ✅ **Logging** with Winston
- ✅ **Security** middleware (Helmet, CORS)
- ✅ **Code quality** tools (ESLint, Prettier)

## 🛠️ Getting Started

### Prerequisites

- Node.js 18+ 
- npm or yarn
- Docker (optional)

### Installation

1. **Install dependencies:**
   ```bash
   npm install
   ```

2. **Run in development mode:**
   ```bash
   npm run dev
   ```

3. **Build for production:**
   ```bash
   npm run build
   npm start
   ```

## 📡 API Endpoints

### Users API

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET    | `/api/users` | Get all users |
| GET    | `/api/users/:id` | Get user by ID |
| POST   | `/api/users` | Create new user |
| PUT    | `/api/users/:id` | Update user |
| DELETE | `/api/users/:id` | Delete user |

### Example Requests

**Create User:**
```bash
curl -X POST http://localhost:3000/api/users \
  -H "Content-Type: application/json" \
  -d '{"name": "John Doe", "email": "john@example.com"}'
```

**Get All Users:**
```bash
curl http://localhost:3000/api/users
```

## 🎯 Microservice Separation Strategy

This template is designed for easy microservice separation:

### By Domain Context (Recommended)
- **User Management** → `user-service`
- **Product Catalog** → `product-service`  
- **Order Processing** → `order-service`
- **Payment Processing** → `payment-service`

### By Technical Concerns
- **API Gateway** → Single entry point
- **Event Bus** → Message routing
- **File Storage** → File operations
- **Notifications** → Email/SMS/Push

### Separation Points

Each domain folder (`src/domain/user/`) can become its own service:

1. **Extract domain** → New service repository
2. **Copy infrastructure** → Database, messaging, etc.
3. **Update DI container** → Service-specific dependencies
4. **Configure communication** → Events, HTTP, gRPC

---

**Generated by express-ts-backend-generator**
*Microservice-ready • DDD • Dependency Injection*
