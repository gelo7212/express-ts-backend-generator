import { injectable, inject } from 'inversify';
import { TYPES } from '../../../infrastructure/types';
import { I<%= domainNames.pascalCase %>Repository } from '../../../domain/<%= domainNames.lowercase %>/repositories/<%= domainNames.kebabCase %>.repository.interface';
import { Update<%= domainNames.pascalCase %>Request, <%= domainNames.pascalCase %>Response } from '../../dto/<%= domainNames.kebabCase %>.dto';
import { <%= domainNames.pascalCase %>DomainService } from '../../../domain/<%= domainNames.lowercase %>/services/<%= domainNames.kebabCase %>-domain.service';

@injectable()
export class Update<%= domainNames.pascalCase %>UseCase {
  constructor(
    @inject(TYPES.<%= domainNames.pascalCase %>Repository) private <%= domainNames.camelCase %>Repository: I<%= domainNames.pascalCase %>Repository,
    @inject(TYPES.<%= domainNames.pascalCase %>DomainService) private <%= domainNames.camelCase %>DomainService: <%= domainNames.pascalCase %>DomainService
  ) {}

  async execute(id: string, request: Update<%= domainNames.pascalCase %>Request): Promise<<%= domainNames.pascalCase %>Response> {
    const <%= domainNames.camelCase %> = await this.<%= domainNames.camelCase %>Repository.findById(id);
    
    if (!<%= domainNames.camelCase %>) {
      throw new Error('<%= domainNames.pascalCase %> not found');
    }

    // Validate unique name if provided
    if (request.name && request.name !== <%= domainNames.camelCase %>.name) {
      const isNameUnique = await this.<%= domainNames.camelCase %>DomainService.validateUniqueName(request.name, id);
      if (!isNameUnique) {
        throw new Error('<%= domainNames.pascalCase %> with this name already exists');
      }
    }

    // Update <%= domainNames.camelCase %> properties
    if (request.name) {
      <%= domainNames.camelCase %>.updateName(request.name);
    }
    if (request.description !== undefined) {
      <%= domainNames.camelCase %>.updateDescription(request.description);
    }
    if (request.isActive !== undefined) {
      if (request.isActive) {
        <%= domainNames.camelCase %>.activate();
      } else {
        <%= domainNames.camelCase %>.deactivate();
      }
    }

    // Save changes
    await this.<%= domainNames.camelCase %>Repository.update(<%= domainNames.camelCase %>);

    return <%= domainNames.camelCase %>.toJSON();
  }
}
