import { injectable, inject } from 'inversify';
import { TYPES } from '../../../infrastructure/types';
import { I<%= domainNames.pascalCase %>Repository } from '../../../domain/<%= domainNames.lowercase %>/repositories/<%= domainNames.kebabCase %>.repository.interface';
import { <%= domainNames.pascalCase %>DomainService } from '../../../domain/<%= domainNames.lowercase %>/services/<%= domainNames.kebabCase %>-domain.service';

@injectable()
export class Delete<%= domainNames.pascalCase %>UseCase {
  constructor(
    @inject(TYPES.<%= domainNames.pascalCase %>Repository) private <%= domainNames.camelCase %>Repository: I<%= domainNames.pascalCase %>Repository,
    @inject(TYPES.<%= domainNames.pascalCase %>DomainService) private <%= domainNames.camelCase %>DomainService: <%= domainNames.pascalCase %>DomainService
  ) {}

  async execute(id: string): Promise<void> {
    const <%= domainNames.camelCase %> = await this.<%= domainNames.camelCase %>Repository.findById(id);
    
    if (!<%= domainNames.camelCase %>) {
      throw new Error('<%= domainNames.pascalCase %> not found');
    }

    // Check if can delete
    const canDelete = await this.<%= domainNames.camelCase %>DomainService.canDelete(id);
    if (!canDelete) {
      throw new Error('<%= domainNames.pascalCase %> cannot be deleted');
    }

    await this.<%= domainNames.camelCase %>Repository.delete(id);
  }
}
