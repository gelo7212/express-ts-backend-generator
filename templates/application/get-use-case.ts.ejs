import { injectable, inject } from 'inversify';
import { TYPES } from '../../../infrastructure/types';
import { I<%= domainNames.pascalCase %>Repository } from '../../../domain/<%= domainNames.lowercase %>/repositories/<%= domainNames.kebabCase %>.repository.interface';
import { <%= domainNames.pascalCase %>Response } from '../../dto/<%= domainNames.kebabCase %>.dto';

@injectable()
export class Get<%= domainNames.pascalCase %>UseCase {
  constructor(
    @inject(TYPES.<%= domainNames.pascalCase %>Repository) private <%= domainNames.camelCase %>Repository: I<%= domainNames.pascalCase %>Repository
  ) {}

  async execute(id: string): Promise<<%= domainNames.pascalCase %>Response | null> {
    const <%= domainNames.camelCase %> = await this.<%= domainNames.camelCase %>Repository.findById(id);
    
    if (!<%= domainNames.camelCase %>) {
      return null;
    }

    return <%= domainNames.camelCase %>.toJSON();
  }

  async executeAll(): Promise<<%= domainNames.pascalCase %>Response[]> {
    const <%= domainNames.pluralCamelCase %> = await this.<%= domainNames.camelCase %>Repository.findAll();
    return <%= domainNames.pluralCamelCase %>.map(<%= domainNames.camelCase %> => <%= domainNames.camelCase %>.toJSON());
  }
}
